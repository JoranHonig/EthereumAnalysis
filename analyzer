#!/usr/bin/env python3
from EthereumAnalysis.AnalysisManager import AnalysisManager
from EthereumAnalysis.ContractNotifier.LocalNotifier import LocalNotifier
from EthereumAnalysis.Reporter.LocalReporter import LocalReporter
from EthereumAnalysis.AnalysisRunner.AnalysisRunner import AnalysisRunner
from termcolor import colored
import asyncio
import time
import logging
import argparse


parser = argparse.ArgumentParser(description='analyser automatically runs analysis on new smart contracts')

local_settings = parser.add_argument_group("Local analysis settings settings")
local_settings.add_argument('-l', action='store_true', help='Use local modules for notification and reporting')
local_settings.add_argument('--rpc-settings', metavar="HOST:PORT", help="Hostname of ethereum rpc interface")
local_settings.add_argument('-i', action='store_true', help="Use infura network")

parser.add_argument('-f', action='store_true', help='Start analysis from genesis block')
parser.add_argument('-d', action='store_true', help='Enable logging')
parser.add_argument('--interval', type=int, help='Ethereum polling interval', default=60)
args = parser.parse_args()
# Enable logging
if args.d:
    logging.basicConfig(level=logging.DEBUG)

notifier = None
reporter = None
runner = None

# Initialize local objects
if args.l:
    # Initialize notifier
    host, port = None, None
    if args.i:
        logging.debug("Initializing connection with infura network")
        # notifier = LocalNotifier('mainnet.infura.io', 443)
        host = 'mainnet.infura.io'
        port = '443'
    elif args.rpc_settings:
        logging.debug("Initializing connection with ethereum rpc interface at {}".format(args.rpc_settings))
        host = args.rpc_settings.split(':')[0]
        port = args.rpc_settings.split(':')[1]
    else:
        print("Use the infura network or use a custom rpc interface")
        exit(0)

    notifier = LocalNotifier(host, port)

    logging.debug("Initializing local reporter")
    reporter = LocalReporter()

    logging.debug("Initializing analysis module")
    runner = AnalysisRunner((host, port))
else:
    print("Not implemented")
    exit(0)


if notifier is None or reporter is None or runner is None:
    print("The required components are not correctly initialized")
    exit(0)

logging.debug("Setting up Analysis manager")
AnalysisManager(notifier, reporter, runner)

logging.debug("Starting scanning loop with interval {} sec".format(args.interval))

async def main(args):
    tasks = []
    try:
        while True:
            await asyncio.sleep(args.interval)
            tasks += notifier.scan()
            await asyncio.gather(*tasks)
            if tasks != []:
                pass
    except KeyboardInterrupt:
        print("\n{} Received exit signal, exiting...".format(
            colored('[*]', 'red')
        ))
        loop.stop()
        exit(0)

asyncio.ensure_future(main(args))

loop = asyncio.get_event_loop()
loop.run_forever()


